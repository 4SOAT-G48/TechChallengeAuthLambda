service: auth-lambda
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs20.x
  timeout: 20
  environment:
    USER_POOL: { Ref: UserPool }
    USER_POOL_CLIENT: { Ref: UserClient }
  httpApi:
    cors: true
    authorizers: 
      userAuthoriser:
        identitySource: $request.header.Authorization
        issuerUrl: "https://cognito-idp.us-east-1.amazonaws.com/${USER_POOL}"
        audience: 
          - "${USER_POOL_CLIENT}"
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
          - cognito-idp:AdminInitiateAuth
          - cognito-idp:AdminCreateUser
          - cognito-idp:AdminSetUserPassword
          Resource: "*"
         
resources:
  Resources:
    UserPool: 
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-pool-${sls.stage}
        Schema: 
          - Name: cpf
            Required: true
            Mutable: true
            AttributeDataType: String
            StringAttributeConstraints:
              MinLength: "11"
              MaxLength: "11"
          - Name: name
            Required: true
            Mutable: true
          - Name: email
            Required: false
            Mutable: true
        Policies:
          PasswordPolicy: 
            MinimumLength: 6
        AutoVerifiedAttributes: []    
    UserClient: 
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-client-${sls.stage}
        GenerateSecret: false
        UserPoolId: 
          Ref: UserPool
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows: 
          - "ADMIN_NO_SRP_AUTH" 

functions:
  register:
    handler: src/functions/register.register
    events:
      - httpApi:
          path: /register
          method: post
  login:
    handler: src/functions/login.login
    events:
      - httpApi:
          path: /login
          method: post

plugins:
  - serverless-offline
custom:
  serverless-offline:
    useChildProcesses: true
    noAuth: true